/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ArtifactRequest } from "./artifactrequest";
import { ExecutionResult } from "./executionresult";
import { RunningContext } from "./runningcontext";
import { TestContent } from "./testcontent";
import { Variable } from "./variable";
import { Expose, Transform, Type } from "class-transformer";

/**
 * usage mode for arguments
 */
export enum ExecutionArgsMode {
    Append = "append",
    Override = "override",
}

/**
 * test execution
 */
export class Execution extends SpeakeasyBase {
    /**
     * additional arguments/flags passed to executor binary
     */
    @SpeakeasyMetadata()
    @Expose({ name: "args" })
    args?: string[];

    /**
     * usage mode for arguments
     */
    @SpeakeasyMetadata()
    @Expose({ name: "args_mode" })
    argsMode?: ExecutionArgsMode;

    /**
     * artifact request body with test artifacts
     */
    @SpeakeasyMetadata()
    @Expose({ name: "artifactRequest" })
    @Type(() => ArtifactRequest)
    artifactRequest?: ArtifactRequest;

    /**
     * minio bucket name to get uploads from
     */
    @SpeakeasyMetadata()
    @Expose({ name: "bucketName" })
    bucketName?: string;

    /**
     * executor image command
     */
    @SpeakeasyMetadata()
    @Expose({ name: "command" })
    command?: string[];

    @SpeakeasyMetadata()
    @Expose({ name: "content" })
    @Type(() => TestContent)
    content?: TestContent;

    /**
     * test duration
     */
    @SpeakeasyMetadata()
    @Expose({ name: "duration" })
    duration?: string;

    /**
     * test duration in milliseconds
     */
    @SpeakeasyMetadata()
    @Expose({ name: "durationMs" })
    durationMs?: number;

    /**
     * test end time
     */
    @SpeakeasyMetadata()
    @Expose({ name: "endTime" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    endTime?: Date;

    /**
     * Environment variables passed to executor. Deprecated: use Basic Variables instead
     *
     * @deprecated this field will be removed in a future release, please migrate away from it as soon as possible
     */
    @SpeakeasyMetadata()
    @Expose({ name: "envs" })
    envs?: Record<string, string>;

    /**
     * execution result returned from executor
     */
    @SpeakeasyMetadata()
    @Expose({ name: "executionResult" })
    @Type(() => ExecutionResult)
    executionResult?: ExecutionResult;

    /**
     * execution id
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * in case the variables file is too big, it will be uploaded to storage
     */
    @SpeakeasyMetadata()
    @Expose({ name: "isVariablesFileUploaded" })
    isVariablesFileUploaded?: boolean;

    /**
     * test and execution labels
     */
    @SpeakeasyMetadata()
    @Expose({ name: "labels" })
    labels?: Record<string, string>;

    /**
     * execution name
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * execution number
     */
    @SpeakeasyMetadata()
    @Expose({ name: "number" })
    number?: number;

    /**
     * script to run after test execution (not supported for container executors)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "postRunScript" })
    postRunScript?: string;

    /**
     * script to run before test execution (not supported for container executors)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "preRunScript" })
    preRunScript?: string;

    /**
     * running context for test or test suite execution
     */
    @SpeakeasyMetadata()
    @Expose({ name: "runningContext" })
    @Type(() => RunningContext)
    runningContext?: RunningContext;

    /**
     * test start time
     */
    @SpeakeasyMetadata()
    @Expose({ name: "startTime" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    startTime?: Date;

    /**
     * unique test name (CRD Test name)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "testName" })
    testName?: string;

    /**
     * test namespace
     */
    @SpeakeasyMetadata()
    @Expose({ name: "testNamespace" })
    testNamespace?: string;

    /**
     * test secret uuid
     */
    @SpeakeasyMetadata()
    @Expose({ name: "testSecretUUID" })
    testSecretUUID?: string;

    /**
     * unique test suite name (CRD Test suite name), if it's run as a part of test suite
     */
    @SpeakeasyMetadata()
    @Expose({ name: "testSuiteName" })
    testSuiteName?: string;

    /**
     * test suite secret uuid, if it's run as a part of test suite
     */
    @SpeakeasyMetadata()
    @Expose({ name: "testSuiteSecretUUID" })
    testSuiteSecretUUID?: string;

    /**
     * test type e.g. postman/collection
     */
    @SpeakeasyMetadata()
    @Expose({ name: "testType" })
    testType?: string;

    /**
     * list of file paths that need to be copied into the test from uploads
     */
    @SpeakeasyMetadata()
    @Expose({ name: "uploads" })
    uploads?: string[];

    /**
     * execution variables passed to executor converted to vars for usage in tests
     */
    @SpeakeasyMetadata({ elemType: Variable })
    @Expose({ name: "variables" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, Variable> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], Variable);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    variables?: Record<string, Variable>;

    /**
     * variables file content - need to be in format for particular executor (e.g. postman envs file)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "variablesFile" })
    variablesFile?: string;
}
