/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ArtifactRequest } from "./artifactrequest";
import { EnvReference } from "./envreference";
import { LocalObjectReference } from "./localobjectreference";
import { RunningContext } from "./runningcontext";
import { TestContentRequest } from "./testcontentrequest";
import { Variable } from "./variable";
import { Expose, Transform, Type } from "class-transformer";

/**
 * usage mode for arguments
 */
export enum ExecutionRequestArgsMode {
    Append = "append",
    Override = "override",
}

/**
 * test execution request body
 */
export class ExecutionRequest extends SpeakeasyBase {
    /**
     * duration in seconds the test may be active, until its stopped
     */
    @SpeakeasyMetadata()
    @Expose({ name: "activeDeadlineSeconds" })
    activeDeadlineSeconds?: number;

    /**
     * additional executor binary arguments
     */
    @SpeakeasyMetadata()
    @Expose({ name: "args" })
    args?: string[];

    /**
     * usage mode for arguments
     */
    @SpeakeasyMetadata()
    @Expose({ name: "args_mode" })
    argsMode?: ExecutionRequestArgsMode;

    /**
     * artifact request body with test artifacts
     */
    @SpeakeasyMetadata()
    @Expose({ name: "artifactRequest" })
    @Type(() => ArtifactRequest)
    artifactRequest?: ArtifactRequest;

    /**
     * minio bucket name to get uploads from
     */
    @SpeakeasyMetadata()
    @Expose({ name: "bucketName" })
    bucketName?: string;

    /**
     * executor image command
     */
    @SpeakeasyMetadata()
    @Expose({ name: "command" })
    command?: string[];

    /**
     * test content request body
     */
    @SpeakeasyMetadata()
    @Expose({ name: "contentRequest" })
    @Type(() => TestContentRequest)
    contentRequest?: TestContentRequest;

    /**
     * cron job template extensions
     */
    @SpeakeasyMetadata()
    @Expose({ name: "cronJobTemplate" })
    cronJobTemplate?: string;

    /**
     * config map references
     */
    @SpeakeasyMetadata({ elemType: EnvReference })
    @Expose({ name: "envConfigMaps" })
    @Type(() => EnvReference)
    envConfigMaps?: EnvReference[];

    /**
     * secret references
     */
    @SpeakeasyMetadata({ elemType: EnvReference })
    @Expose({ name: "envSecrets" })
    @Type(() => EnvReference)
    envSecrets?: EnvReference[];

    /**
     * Environment variables passed to executor. Deprecated: use Basic Variables instead
     *
     * @deprecated this field will be removed in a future release, please migrate away from it as soon as possible
     */
    @SpeakeasyMetadata()
    @Expose({ name: "envs" })
    envs?: Record<string, string>;

    /**
     * test execution labels
     */
    @SpeakeasyMetadata()
    @Expose({ name: "executionLabels" })
    executionLabels?: Record<string, string>;

    /**
     * http proxy for executor containers
     */
    @SpeakeasyMetadata()
    @Expose({ name: "httpProxy" })
    httpProxy?: string;

    /**
     * https proxy for executor containers
     */
    @SpeakeasyMetadata()
    @Expose({ name: "httpsProxy" })
    httpsProxy?: string;

    /**
     * execution id
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * container image, executor will run inside this image
     */
    @SpeakeasyMetadata()
    @Expose({ name: "image" })
    image?: string;

    /**
     * container image pull secrets
     */
    @SpeakeasyMetadata({ elemType: LocalObjectReference })
    @Expose({ name: "imagePullSecrets" })
    @Type(() => LocalObjectReference)
    imagePullSecrets?: LocalObjectReference[];

    /**
     * whether negativeTest was changed by user
     */
    @SpeakeasyMetadata()
    @Expose({ name: "isNegativeTestChangedOnRun" })
    isNegativeTestChangedOnRun?: boolean;

    /**
     * in case the variables file is too big, it will be uploaded
     */
    @SpeakeasyMetadata()
    @Expose({ name: "isVariablesFileUploaded" })
    isVariablesFileUploaded?: boolean;

    /**
     * job template extensions
     */
    @SpeakeasyMetadata()
    @Expose({ name: "jobTemplate" })
    jobTemplate?: string;

    /**
     * test execution custom name
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * test kubernetes namespace ("testkube" when not set)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "namespace" })
    namespace?: string;

    /**
     * whether to run test as negative test
     */
    @SpeakeasyMetadata()
    @Expose({ name: "negativeTest" })
    negativeTest?: boolean;

    /**
     * test execution number
     */
    @SpeakeasyMetadata()
    @Expose({ name: "number" })
    number?: number;

    /**
     * script to run after test execution (not supported for container executors)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "postRunScript" })
    postRunScript?: string;

    /**
     * script to run before test execution (not supported for container executors)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "preRunScript" })
    preRunScript?: string;

    /**
     * running context for test or test suite execution
     */
    @SpeakeasyMetadata()
    @Expose({ name: "runningContext" })
    @Type(() => RunningContext)
    runningContext?: RunningContext;

    /**
     * scraper template extensions
     */
    @SpeakeasyMetadata()
    @Expose({ name: "scraperTemplate" })
    scraperTemplate?: string;

    /**
     * Execution variables passed to executor from secrets. Deprecated: use Secret Variables instead
     *
     * @deprecated this field will be removed in a future release, please migrate away from it as soon as possible
     */
    @SpeakeasyMetadata()
    @Expose({ name: "secretEnvs" })
    secretEnvs?: Record<string, string>;

    /**
     * whether to start execution sync or async
     */
    @SpeakeasyMetadata()
    @Expose({ name: "sync" })
    sync?: boolean;

    /**
     * test secret uuid
     */
    @SpeakeasyMetadata()
    @Expose({ name: "testSecretUUID" })
    testSecretUUID?: string;

    /**
     * unique test suite name (CRD Test suite name), if it's run as a part of test suite
     */
    @SpeakeasyMetadata()
    @Expose({ name: "testSuiteName" })
    testSuiteName?: string;

    /**
     * test suite secret uuid, if it's run as a part of test suite
     */
    @SpeakeasyMetadata()
    @Expose({ name: "testSuiteSecretUUID" })
    testSuiteSecretUUID?: string;

    /**
     * list of file paths that need to be copied into the test from uploads
     */
    @SpeakeasyMetadata()
    @Expose({ name: "uploads" })
    uploads?: string[];

    /**
     * execution variables passed to executor converted to vars for usage in tests
     */
    @SpeakeasyMetadata({ elemType: Variable })
    @Expose({ name: "variables" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, Variable> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], Variable);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    variables?: Record<string, Variable>;

    /**
     * variables file content - need to be in format for particular executor (e.g. postman envs file)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "variablesFile" })
    variablesFile?: string;
}

/**
 * test execution request body
 */
export class ExecutionRequestInput extends SpeakeasyBase {
    /**
     * duration in seconds the test may be active, until its stopped
     */
    @SpeakeasyMetadata()
    @Expose({ name: "activeDeadlineSeconds" })
    activeDeadlineSeconds?: number;

    /**
     * additional executor binary arguments
     */
    @SpeakeasyMetadata()
    @Expose({ name: "args" })
    args?: string[];

    /**
     * usage mode for arguments
     */
    @SpeakeasyMetadata()
    @Expose({ name: "args_mode" })
    argsMode?: ExecutionRequestArgsMode;

    /**
     * artifact request body with test artifacts
     */
    @SpeakeasyMetadata()
    @Expose({ name: "artifactRequest" })
    @Type(() => ArtifactRequest)
    artifactRequest?: ArtifactRequest;

    /**
     * minio bucket name to get uploads from
     */
    @SpeakeasyMetadata()
    @Expose({ name: "bucketName" })
    bucketName?: string;

    /**
     * executor image command
     */
    @SpeakeasyMetadata()
    @Expose({ name: "command" })
    command?: string[];

    /**
     * test content request body
     */
    @SpeakeasyMetadata()
    @Expose({ name: "contentRequest" })
    @Type(() => TestContentRequest)
    contentRequest?: TestContentRequest;

    /**
     * cron job template extensions
     */
    @SpeakeasyMetadata()
    @Expose({ name: "cronJobTemplate" })
    cronJobTemplate?: string;

    /**
     * config map references
     */
    @SpeakeasyMetadata({ elemType: EnvReference })
    @Expose({ name: "envConfigMaps" })
    @Type(() => EnvReference)
    envConfigMaps?: EnvReference[];

    /**
     * secret references
     */
    @SpeakeasyMetadata({ elemType: EnvReference })
    @Expose({ name: "envSecrets" })
    @Type(() => EnvReference)
    envSecrets?: EnvReference[];

    /**
     * Environment variables passed to executor. Deprecated: use Basic Variables instead
     *
     * @deprecated this field will be removed in a future release, please migrate away from it as soon as possible
     */
    @SpeakeasyMetadata()
    @Expose({ name: "envs" })
    envs?: Record<string, string>;

    /**
     * test execution labels
     */
    @SpeakeasyMetadata()
    @Expose({ name: "executionLabels" })
    executionLabels?: Record<string, string>;

    /**
     * http proxy for executor containers
     */
    @SpeakeasyMetadata()
    @Expose({ name: "httpProxy" })
    httpProxy?: string;

    /**
     * https proxy for executor containers
     */
    @SpeakeasyMetadata()
    @Expose({ name: "httpsProxy" })
    httpsProxy?: string;

    /**
     * execution id
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * container image, executor will run inside this image
     */
    @SpeakeasyMetadata()
    @Expose({ name: "image" })
    image?: string;

    /**
     * container image pull secrets
     */
    @SpeakeasyMetadata({ elemType: LocalObjectReference })
    @Expose({ name: "imagePullSecrets" })
    @Type(() => LocalObjectReference)
    imagePullSecrets?: LocalObjectReference[];

    /**
     * whether negativeTest was changed by user
     */
    @SpeakeasyMetadata()
    @Expose({ name: "isNegativeTestChangedOnRun" })
    isNegativeTestChangedOnRun?: boolean;

    /**
     * in case the variables file is too big, it will be uploaded
     */
    @SpeakeasyMetadata()
    @Expose({ name: "isVariablesFileUploaded" })
    isVariablesFileUploaded?: boolean;

    /**
     * job template extensions
     */
    @SpeakeasyMetadata()
    @Expose({ name: "jobTemplate" })
    jobTemplate?: string;

    /**
     * test execution custom name
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * test kubernetes namespace ("testkube" when not set)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "namespace" })
    namespace?: string;

    /**
     * whether to run test as negative test
     */
    @SpeakeasyMetadata()
    @Expose({ name: "negativeTest" })
    negativeTest?: boolean;

    /**
     * test execution number
     */
    @SpeakeasyMetadata()
    @Expose({ name: "number" })
    number?: number;

    /**
     * script to run after test execution (not supported for container executors)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "postRunScript" })
    postRunScript?: string;

    /**
     * script to run before test execution (not supported for container executors)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "preRunScript" })
    preRunScript?: string;

    /**
     * running context for test or test suite execution
     */
    @SpeakeasyMetadata()
    @Expose({ name: "runningContext" })
    @Type(() => RunningContext)
    runningContext?: RunningContext;

    /**
     * scraper template extensions
     */
    @SpeakeasyMetadata()
    @Expose({ name: "scraperTemplate" })
    scraperTemplate?: string;

    /**
     * Execution variables passed to executor from secrets. Deprecated: use Secret Variables instead
     *
     * @deprecated this field will be removed in a future release, please migrate away from it as soon as possible
     */
    @SpeakeasyMetadata()
    @Expose({ name: "secretEnvs" })
    secretEnvs?: Record<string, string>;

    /**
     * whether to start execution sync or async
     */
    @SpeakeasyMetadata()
    @Expose({ name: "sync" })
    sync?: boolean;

    /**
     * unique test suite name (CRD Test suite name), if it's run as a part of test suite
     */
    @SpeakeasyMetadata()
    @Expose({ name: "testSuiteName" })
    testSuiteName?: string;

    /**
     * list of file paths that need to be copied into the test from uploads
     */
    @SpeakeasyMetadata()
    @Expose({ name: "uploads" })
    uploads?: string[];

    /**
     * execution variables passed to executor converted to vars for usage in tests
     */
    @SpeakeasyMetadata({ elemType: Variable })
    @Expose({ name: "variables" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, Variable> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], Variable);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    variables?: Record<string, Variable>;

    /**
     * variables file content - need to be in format for particular executor (e.g. postman envs file)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "variablesFile" })
    variablesFile?: string;
}
