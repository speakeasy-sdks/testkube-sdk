/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as errors from "./models/errors";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Test Triggers CRUD operations
 */
export enum BulkUpdateTestTriggersAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum CreateTestTriggerJsonAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
    textYaml = "text/yaml",
}

export enum CreateTestTriggerStringAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
    textYaml = "text/yaml",
}

export enum GetTestTriggerByIDAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
    textYaml = "text/yaml",
}

export enum ListTestTriggersAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
    textYaml = "text/yaml",
}

export enum UpdateTestTriggerJsonAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum UpdateTestTriggerStringAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export class TestTriggers {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Bulk update test triggers
     *
     * @remarks
     * Updates test triggers provided as an array in the request body
     */
    async bulkUpdateTestTriggers(
        req: shared.TestTriggerUpsertRequest[],
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: BulkUpdateTestTriggersAcceptEnum
    ): Promise<operations.BulkUpdateTestTriggersResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/triggers";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "patch",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.BulkUpdateTestTriggersResponse =
            new operations.BulkUpdateTestTriggersResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testTriggers = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.testTriggers = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestTrigger,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case [400, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create new test trigger
     *
     * @remarks
     * Create new test trigger CRD inside a Kubernetes cluster
     */
    async createTestTriggerJson(
        req: shared.TestTriggerUpsertRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: CreateTestTriggerJsonAcceptEnum
    ): Promise<operations.CreateTestTriggerJsonResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.TestTriggerUpsertRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/triggers";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] =
                "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        }

        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateTestTriggerJsonResponse =
            new operations.CreateTestTriggerJsonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testTrigger = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestTrigger
                    );
                } else if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.createTestTriggerJson200TextYamlString = decodedRes;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case [400, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create new test trigger
     *
     * @remarks
     * Create new test trigger CRD inside a Kubernetes cluster
     */
    async createTestTriggerString(
        req: string,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: CreateTestTriggerStringAcceptEnum
    ): Promise<operations.CreateTestTriggerStringResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/triggers";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "string");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] =
                "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        }

        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateTestTriggerStringResponse =
            new operations.CreateTestTriggerStringResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testTrigger = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestTrigger
                    );
                } else if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.createTestTriggerString200TextYamlString = decodedRes;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case [400, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Delete test trigger
     *
     * @remarks
     * Deletes a test trigger
     */
    async deleteTestTrigger(
        req: operations.DeleteTestTriggerRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteTestTriggerResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteTestTriggerRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/triggers/{id}", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/problem+json";

        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "delete",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteTestTriggerResponse = new operations.DeleteTestTriggerResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 204:
                break;
            case [404, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Delete test triggers
     *
     * @remarks
     * Deletes all or labeled test triggers
     */
    async deleteTestTriggers(
        req: operations.DeleteTestTriggersRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteTestTriggersResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteTestTriggersRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/triggers";
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/problem+json";

        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "delete",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteTestTriggersResponse =
            new operations.DeleteTestTriggersResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 204:
                break;
            case [400, 404, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get test trigger by ID
     *
     * @remarks
     * Get test trigger by ID from CRD in kubernetes cluster
     */
    async getTestTriggerByID(
        req: operations.GetTestTriggerByIDRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: GetTestTriggerByIDAcceptEnum
    ): Promise<operations.GetTestTriggerByIDResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetTestTriggerByIDRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/triggers/{id}", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] =
                "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        }

        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetTestTriggerByIDResponse =
            new operations.GetTestTriggerByIDResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testTrigger = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestTrigger
                    );
                } else if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.getTestTriggerByID200TextYamlString = decodedRes;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case [404, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * List test triggers
     *
     * @remarks
     * List test triggers from the kubernetes cluster
     */
    async listTestTriggers(
        req: operations.ListTestTriggersRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: ListTestTriggersAcceptEnum
    ): Promise<operations.ListTestTriggersResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTestTriggersRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/triggers";
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] =
                "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        }

        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListTestTriggersResponse = new operations.ListTestTriggersResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testTriggers = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.testTriggers = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestTrigger,
                        resFieldDepth
                    );
                } else if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.listTestTriggers200TextYamlString = decodedRes;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case [400, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update test trigger
     *
     * @remarks
     * Update test trigger
     */
    async updateTestTriggerJson(
        req: operations.UpdateTestTriggerJsonRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: UpdateTestTriggerJsonAcceptEnum
    ): Promise<operations.UpdateTestTriggerJsonResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateTestTriggerJsonRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/triggers/{id}", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "testTriggerUpsertRequest",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers = { ...reqBodyHeaders, ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "patch",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateTestTriggerJsonResponse =
            new operations.UpdateTestTriggerJsonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testTrigger = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestTrigger
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case [400, 404, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update test trigger
     *
     * @remarks
     * Update test trigger
     */
    async updateTestTriggerString(
        req: operations.UpdateTestTriggerStringRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: UpdateTestTriggerStringAcceptEnum
    ): Promise<operations.UpdateTestTriggerStringResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateTestTriggerStringRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/triggers/{id}", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "string");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers = { ...reqBodyHeaders, ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "patch",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateTestTriggerStringResponse =
            new operations.UpdateTestTriggerStringResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testTrigger = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestTrigger
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case [400, 404, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }
}
