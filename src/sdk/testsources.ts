/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class TestSources {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Create new test source
     *
     * @remarks
     * Create new test source based on variables passed in request
     */
    async createTestSourceJson(
        req: shared.TestSourceUpsertRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateTestSourceJsonResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.TestSourceUpsertRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/test-sources";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateTestSourceJsonResponse =
            new operations.CreateTestSourceJsonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.createTestSourceJson200TextYamlString = decodedRes;
                }
                break;
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testSource = utils.objectToClass(JSON.parse(decodedRes), shared.TestSource);
                }
                break;
            case [400, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create new test source
     *
     * @remarks
     * Create new test source based on variables passed in request
     */
    async createTestSourceString(
        req: string,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateTestSourceStringResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/test-sources";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "string");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateTestSourceStringResponse =
            new operations.CreateTestSourceStringResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.createTestSourceString200TextYamlString = decodedRes;
                }
                break;
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testSource = utils.objectToClass(JSON.parse(decodedRes), shared.TestSource);
                }
                break;
            case [400, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Delete test source
     *
     * @remarks
     * Deletes test source by its name
     */
    async deleteTestSource(
        req: operations.DeleteTestSourceRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteTestSourceResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteTestSourceRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/test-sources/{id}", req);

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/problem+json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "delete",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteTestSourceResponse = new operations.DeleteTestSourceResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 204:
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Delete test sources
     *
     * @remarks
     * Deletes labeled test sources
     */
    async deleteTestSources(
        req: operations.DeleteTestSourcesRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteTestSourcesResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteTestSourcesRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/test-sources";

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/problem+json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "delete",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteTestSourcesResponse = new operations.DeleteTestSourcesResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 204:
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get test source data
     *
     * @remarks
     * Returns test sources data
     */
    async getTestSource(
        req: operations.GetTestSourceRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.GetTestSourceResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetTestSourceRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/test-sources/{id}", req);

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetTestSourceResponse = new operations.GetTestSourceResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testSource = utils.objectToClass(JSON.parse(decodedRes), shared.TestSource);
                }
                if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.getTestSource200TextYamlString = decodedRes;
                }
                break;
            case [400, 404, 500, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                }
                break;
        }

        return res;
    }

    /**
     * List test sources
     *
     * @remarks
     * List test sources available in cluster
     */
    async listTestSources(
        req: operations.ListTestSourcesRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.ListTestSourcesResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTestSourcesRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/test-sources";

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListTestSourcesResponse = new operations.ListTestSourcesResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testSources = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.testSources = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestSource,
                        resFieldDepth
                    );
                }
                if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.listTestSources200TextYamlString = decodedRes;
                }
                break;
            case [400, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Process test source batch (create, update, delete)
     *
     * @remarks
     * Process test source batch based on variables passed in request
     */
    async processTestSourceBatch(
        req: shared.TestSourceBatchRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.ProcessTestSourceBatchResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.TestSourceBatchRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/test-sources";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "patch",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ProcessTestSourceBatchResponse =
            new operations.ProcessTestSourceBatchResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testSourceBatchResult = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestSourceBatchResult
                    );
                }
                break;
            case [400, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update test source
     *
     * @remarks
     * Update test source based on test content or git based data
     */
    async updateTestSourceJson(
        req: operations.UpdateTestSourceJsonRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateTestSourceJsonResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateTestSourceJsonRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/test-sources/{id}", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "testSourceUpdateRequest",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "patch",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateTestSourceJsonResponse =
            new operations.UpdateTestSourceJsonResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testSource = utils.objectToClass(JSON.parse(decodedRes), shared.TestSource);
                }
                break;
            case [400, 404, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update test source
     *
     * @remarks
     * Update test source based on test content or git based data
     */
    async updateTestSourceString(
        req: operations.UpdateTestSourceStringRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateTestSourceStringResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateTestSourceStringRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/test-sources/{id}", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "string");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "patch",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateTestSourceStringResponse =
            new operations.UpdateTestSourceStringResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testSource = utils.objectToClass(JSON.parse(decodedRes), shared.TestSource);
                }
                break;
            case [400, 404, 502].includes(httpRes?.status):
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.problems = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.problems = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                }
                break;
        }

        return res;
    }
}
