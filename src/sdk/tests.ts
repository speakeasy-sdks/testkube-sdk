/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";
import * as shared from "../sdk/models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse, RawAxiosRequestHeaders } from "axios";

/**
 * Tests operations
 */
export enum CreateTestJsonAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
    textYaml = "text/yaml",
}

export enum CreateTestStringAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
    textYaml = "text/yaml",
}

export enum ExecuteTestAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum ExecuteTestsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum GetTestAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
    textYaml = "text/yaml",
}

export enum GetTestExecutionAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum GetTestMetricsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum GetTestSuiteMetricsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum GetTestWithExecutionAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
    textYaml = "text/yaml",
}

export enum ListTestExecutionsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum ListTestWithExecutionsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
    textYaml = "text/yaml",
}

export enum ListTestsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
    textYaml = "text/yaml",
}

export enum UpdateTestJsonAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum UpdateTestStringAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum UploadsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
    textYaml = "text/yaml",
}

export class Tests {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Aborts execution
     *
     * @remarks
     * Aborts execution with given executionID
     */
    async abortExecution(
        req: operations.AbortExecutionRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.AbortExecutionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AbortExecutionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/tests/{id}/executions/{executionID}", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        headers["Accept"] = "application/problem+json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "patch",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.AbortExecutionResponse = new operations.AbortExecutionResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 204:
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.classes = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.classes = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Abort all executions of a test
     *
     * @remarks
     * Abort all test executions
     */
    async abortTestExecutions(
        req: operations.AbortTestExecutionsRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.AbortTestExecutionsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AbortTestExecutionsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/tests/{id}/abort", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        headers["Accept"] = "application/problem+json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.AbortTestExecutionsResponse =
            new operations.AbortTestExecutionsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 204:
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create new test
     *
     * @remarks
     * Create new test based on file content, uri or git based data
     */
    async createTestJson(
        req: shared.TestUpsertRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: CreateTestJsonAcceptEnum
    ): Promise<operations.CreateTestJsonResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.TestUpsertRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/tests";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null) throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] =
                "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateTestJsonResponse = new operations.CreateTestJsonResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.twoHundredTextYamlRes = decodedRes;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.test = utils.objectToClass(JSON.parse(decodedRes), shared.Test);
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create new test
     *
     * @remarks
     * Create new test based on file content, uri or git based data
     */
    async createTestString(
        req: string,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: CreateTestStringAcceptEnum
    ): Promise<operations.CreateTestStringResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/tests";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "string");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null) throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] =
                "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateTestStringResponse = new operations.CreateTestStringResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.twoHundredTextYamlRes = decodedRes;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.test = utils.objectToClass(JSON.parse(decodedRes), shared.Test);
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Delete test
     *
     * @remarks
     * Deletes a test
     */
    async deleteTest(
        req: operations.DeleteTestRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteTestResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteTestRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/tests/{id}", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        headers["Accept"] = "application/problem+json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "delete",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteTestResponse = new operations.DeleteTestResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 204:
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Delete tests
     *
     * @remarks
     * Deletes all or labeled tests
     */
    async deleteTests(
        req: operations.DeleteTestsRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteTestsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteTestsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/tests";
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/problem+json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "delete",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteTestsResponse = new operations.DeleteTestsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 204:
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Starts new test execution
     *
     * @remarks
     * New test execution returns new execution details on successful execution start
     */
    async executeTest(
        req: operations.ExecuteTestRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: ExecuteTestAcceptEnum
    ): Promise<operations.ExecuteTestResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ExecuteTestRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/tests/{id}/executions", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "executionRequest", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...reqBodyHeaders, ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null) throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ExecuteTestResponse = new operations.ExecuteTestResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.executionResult = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.ExecutionResult
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Starts new test executions
     *
     * @remarks
     * New test executions returns new executions details on successful executions start
     */
    async executeTests(
        req: operations.ExecuteTestsRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: ExecuteTestsAcceptEnum
    ): Promise<operations.ExecuteTestsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ExecuteTestsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/executions";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "executionRequest", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...reqBodyHeaders, ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null) throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ExecuteTestsResponse = new operations.ExecuteTestsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.twoHundredAndOneApplicationJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.twoHundredAndOneApplicationJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.ExecutionResult,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get test
     *
     * @remarks
     * Gets the specified test
     */
    async getTest(
        req: operations.GetTestRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: GetTestAcceptEnum
    ): Promise<operations.GetTestResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetTestRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/tests/{id}", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] =
                "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetTestResponse = new operations.GetTestResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.test = utils.objectToClass(JSON.parse(decodedRes), shared.Test);
                } else if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.twoHundredTextYamlRes = decodedRes;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get test execution
     *
     * @remarks
     * Returns execution with given executionID
     */
    async getTestExecution(
        req: operations.GetTestExecutionRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: GetTestExecutionAcceptEnum
    ): Promise<operations.GetTestExecutionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetTestExecutionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/tests/{id}/executions/{executionID}", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetTestExecutionResponse = new operations.GetTestExecutionResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.execution = utils.objectToClass(JSON.parse(decodedRes), shared.Execution);
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get test metrics
     *
     * @remarks
     * Gets test metrics for given tests executions, with particular execution status and timings
     */
    async getTestMetrics(
        req: operations.GetTestMetricsRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: GetTestMetricsAcceptEnum
    ): Promise<operations.GetTestMetricsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetTestMetricsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/tests/{id}/metrics", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetTestMetricsResponse = new operations.GetTestMetricsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.executionsMetrics = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.ExecutionsMetrics
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get test suite metrics
     *
     * @remarks
     * Gets test suite metrics for given tests executions, with particular execution status and timings
     */
    async getTestSuiteMetrics(
        req: operations.GetTestSuiteMetricsRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: GetTestSuiteMetricsAcceptEnum
    ): Promise<operations.GetTestSuiteMetricsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetTestSuiteMetricsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/test-suites/{id}/metrics", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetTestSuiteMetricsResponse =
            new operations.GetTestSuiteMetricsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.executionsMetrics = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.ExecutionsMetrics
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.classes = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.classes = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get test with execution
     *
     * @remarks
     * Gets the specified test with execution
     */
    async getTestWithExecution(
        req: operations.GetTestWithExecutionRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: GetTestWithExecutionAcceptEnum
    ): Promise<operations.GetTestWithExecutionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetTestWithExecutionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/test-with-executions/{id}", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] =
                "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetTestWithExecutionResponse =
            new operations.GetTestWithExecutionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testWithExecution = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestWithExecution
                    );
                } else if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.twoHundredTextYamlRes = decodedRes;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get all test executions
     *
     * @remarks
     * Returns array of all available test executions
     */
    async listTestExecutions(
        req: operations.ListTestExecutionsRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: ListTestExecutionsAcceptEnum
    ): Promise<operations.ListTestExecutionsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTestExecutionsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/tests/{id}/executions", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListTestExecutionsResponse =
            new operations.ListTestExecutionsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.executionsResult = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.ExecutionsResult
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * List test with executions
     *
     * @remarks
     * List available test with executions
     */
    async listTestWithExecutions(
        req: operations.ListTestWithExecutionsRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: ListTestWithExecutionsAcceptEnum
    ): Promise<operations.ListTestWithExecutionsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTestWithExecutionsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/test-with-executions";
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] =
                "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListTestWithExecutionsResponse =
            new operations.ListTestWithExecutionsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.twoHundredApplicationJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.twoHundredApplicationJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestWithExecutionSummary,
                        resFieldDepth
                    );
                } else if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.twoHundredTextYamlRes = decodedRes;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * List tests
     *
     * @remarks
     * List available tests
     */
    async listTests(
        req: operations.ListTestsRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: ListTestsAcceptEnum
    ): Promise<operations.ListTestsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTestsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/tests";
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] =
                "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListTestsResponse = new operations.ListTestsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.twoHundredApplicationJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.twoHundredApplicationJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Test,
                        resFieldDepth
                    );
                } else if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.twoHundredTextYamlRes = decodedRes;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update test
     *
     * @remarks
     * Update test based on test content or git based data
     */
    async updateTestJson(
        req: operations.UpdateTestJsonRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: UpdateTestJsonAcceptEnum
    ): Promise<operations.UpdateTestJsonResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateTestJsonRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/tests/{id}", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "testUpdateRequest",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null) throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "patch",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateTestJsonResponse = new operations.UpdateTestJsonResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.test = utils.objectToClass(JSON.parse(decodedRes), shared.Test);
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update test
     *
     * @remarks
     * Update test based on test content or git based data
     */
    async updateTestString(
        req: operations.UpdateTestStringRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: UpdateTestStringAcceptEnum
    ): Promise<operations.UpdateTestStringResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateTestStringRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/tests/{id}", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "string");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null) throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "patch",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateTestStringResponse = new operations.UpdateTestStringResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.test = utils.objectToClass(JSON.parse(decodedRes), shared.Test);
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Upload file
     *
     * @remarks
     * Upload file to be used in executions and tests
     */
    async uploads(
        req: shared.UploadsBody,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: UploadsAcceptEnum
    ): Promise<operations.UploadsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.UploadsBody(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/uploads";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "multipart");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null) throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] =
                "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UploadsResponse = new operations.UploadsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.twoHundredApplicationJsonRes = decodedRes;
                } else if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.twoHundredTextYamlRes = decodedRes;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }
}
