/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";
import * as shared from "../sdk/models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse, RawAxiosRequestHeaders } from "axios";

/**
 * Test suites and tests execution operations
 */
export enum DownloadArchiveAcceptEnum {
    applicationProblemPlusJson = "application/problem+json",
    applicationOctetStream = "application/octet-stream",
}

export enum DownloadFileAcceptEnum {
    applicationProblemPlusJson = "application/problem+json",
    applicationOctetStream = "application/octet-stream",
}

export enum ExecuteTestAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum ExecuteTestSuiteAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum ExecuteTestSuitesAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum ExecuteTestsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum GetExecutionArtifactsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum GetExecutionByIDAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum GetExecutionLogsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum GetTestExecutionAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum GetTestSuiteExecutionAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum GetTestSuiteExecutionArtifactsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum GetTestSuiteExecutionArtifactsByTestsuiteAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum GetTestSuiteExecutionByIDAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum ListAllTestSuiteExecutionsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum ListExecutionsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum ListTestExecutionsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum ListTestSuiteExecutionsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
}

export enum UploadsAcceptEnum {
    applicationJson = "application/json",
    applicationProblemPlusJson = "application/problem+json",
    textYaml = "text/yaml",
}

export class Executions {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Aborts execution
     *
     * @remarks
     * Aborts execution with given executionID
     */
    async abortExecution(
        req: operations.AbortExecutionRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.AbortExecutionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AbortExecutionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/tests/{id}/executions/{executionID}",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        headers["Accept"] = "application/problem+json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "patch",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.AbortExecutionResponse = new operations.AbortExecutionResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 204:
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.classes = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.classes = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Aborts testsuite execution
     *
     * @remarks
     * Aborts testsuite execution with given executionID
     */
    async abortTestSuiteExecution(
        req: operations.AbortTestSuiteExecutionRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.AbortTestSuiteExecutionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AbortTestSuiteExecutionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/test-suites/{id}/executions/{executionID}",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        headers["Accept"] = "application/problem+json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "patch",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.AbortTestSuiteExecutionResponse =
            new operations.AbortTestSuiteExecutionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 204:
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Aborts testsuite execution
     *
     * @remarks
     * Aborts testsuite execution with given executionID
     */
    async abortTestSuiteExecutionByID(
        req: operations.AbortTestSuiteExecutionByIDRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.AbortTestSuiteExecutionByIDResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AbortTestSuiteExecutionByIDRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/test-suite-executions/{executionID}",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        headers["Accept"] = "application/problem+json";

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "patch",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.AbortTestSuiteExecutionByIDResponse =
            new operations.AbortTestSuiteExecutionByIDResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 204:
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.classes = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.classes = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Download artifact archive
     *
     * @remarks
     * Download the artifact archive from the given execution
     */
    async downloadArchive(
        req: operations.DownloadArchiveRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: DownloadArchiveAcceptEnum
    ): Promise<operations.DownloadArchiveResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DownloadArchiveRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/executions/{id}/artifact-archive",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/problem+json;q=1, application/octet-stream;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DownloadArchiveResponse = new operations.DownloadArchiveResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/octet-stream`)) {
                    res.twoHundredApplicationOctetStreamBytes = httpRes?.data;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Download artifact
     *
     * @remarks
     * Download the artifact file from the given execution
     */
    async downloadFile(
        req: operations.DownloadFileRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: DownloadFileAcceptEnum
    ): Promise<operations.DownloadFileResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DownloadFileRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/executions/{id}/artifacts/{filename}",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/problem+json;q=1, application/octet-stream;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DownloadFileResponse = new operations.DownloadFileResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/octet-stream`)) {
                    res.twoHundredApplicationOctetStreamBytes = httpRes?.data;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Starts new test execution
     *
     * @remarks
     * New test execution returns new execution details on successful execution start
     */
    async executeTest(
        req: operations.ExecuteTestRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: ExecuteTestAcceptEnum
    ): Promise<operations.ExecuteTestResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ExecuteTestRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(baseURL, "/tests/{id}/executions", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "executionRequest", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...reqBodyHeaders, ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null) throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl + queryParams,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ExecuteTestResponse = new operations.ExecuteTestResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.executionResult = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.ExecutionResult
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Starts new test suite execution
     *
     * @remarks
     * New test suite execution returns new execution details on successful execution start
     */
    async executeTestSuite(
        req: operations.ExecuteTestSuiteRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: ExecuteTestSuiteAcceptEnum
    ): Promise<operations.ExecuteTestSuiteResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ExecuteTestSuiteRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/test-suites/{id}/executions",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "testSuiteExecutionRequest",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...reqBodyHeaders, ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null) throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl + queryParams,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ExecuteTestSuiteResponse = new operations.ExecuteTestSuiteResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testSuiteExecutionsResult = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestSuiteExecutionsResult
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Starts new test suite executions
     *
     * @remarks
     * New test suite executions returns new executions details on successful executions start
     */
    async executeTestSuites(
        req: operations.ExecuteTestSuitesRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: ExecuteTestSuitesAcceptEnum
    ): Promise<operations.ExecuteTestSuitesResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ExecuteTestSuitesRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = baseURL.replace(/\/$/, "") + "/test-suite-executions";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "testSuiteExecutionRequest",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...reqBodyHeaders, ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null) throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl + queryParams,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ExecuteTestSuitesResponse = new operations.ExecuteTestSuitesResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.twoHundredAndOneApplicationJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.twoHundredAndOneApplicationJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestSuiteExecutionsResult,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Starts new test executions
     *
     * @remarks
     * New test executions returns new executions details on successful executions start
     */
    async executeTests(
        req: operations.ExecuteTestsRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: ExecuteTestsAcceptEnum
    ): Promise<operations.ExecuteTestsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ExecuteTestsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = baseURL.replace(/\/$/, "") + "/executions";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "executionRequest", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...reqBodyHeaders, ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null) throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl + queryParams,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ExecuteTestsResponse = new operations.ExecuteTestsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.twoHundredAndOneApplicationJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.twoHundredAndOneApplicationJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.ExecutionResult,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get execution's artifacts by ID
     *
     * @remarks
     * Returns artifacts of the given executionID
     */
    async getExecutionArtifacts(
        req: operations.GetExecutionArtifactsRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: GetExecutionArtifactsAcceptEnum
    ): Promise<operations.GetExecutionArtifactsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetExecutionArtifactsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(baseURL, "/executions/{id}/artifacts", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetExecutionArtifactsResponse =
            new operations.GetExecutionArtifactsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.twoHundredApplicationJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.twoHundredApplicationJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Artifact,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get test execution by ID
     *
     * @remarks
     * Returns execution with given executionID
     */
    async getExecutionByID(
        req: operations.GetExecutionByIDRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: GetExecutionByIDAcceptEnum
    ): Promise<operations.GetExecutionByIDResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetExecutionByIDRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(baseURL, "/executions/{executionID}", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetExecutionByIDResponse = new operations.GetExecutionByIDResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.execution = utils.objectToClass(JSON.parse(decodedRes), shared.Execution);
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get execution's logs by ID
     *
     * @remarks
     * Returns logs of the given executionID
     */
    async getExecutionLogs(
        req: operations.GetExecutionLogsRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: GetExecutionLogsAcceptEnum
    ): Promise<operations.GetExecutionLogsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetExecutionLogsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(baseURL, "/executions/{id}/logs", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetExecutionLogsResponse = new operations.GetExecutionLogsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.twoHundredApplicationJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.twoHundredApplicationJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.ExecutorOutput,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get test execution
     *
     * @remarks
     * Returns execution with given executionID
     */
    async getTestExecution(
        req: operations.GetTestExecutionRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: GetTestExecutionAcceptEnum
    ): Promise<operations.GetTestExecutionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetTestExecutionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/tests/{id}/executions/{executionID}",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetTestExecutionResponse = new operations.GetTestExecutionResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.execution = utils.objectToClass(JSON.parse(decodedRes), shared.Execution);
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get test suite execution
     *
     * @remarks
     * Returns test suite execution with given executionID
     */
    async getTestSuiteExecution(
        req: operations.GetTestSuiteExecutionRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: GetTestSuiteExecutionAcceptEnum
    ): Promise<operations.GetTestSuiteExecutionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetTestSuiteExecutionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/test-suites/{id}/executions/{executionID}",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetTestSuiteExecutionResponse =
            new operations.GetTestSuiteExecutionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testSuiteExecution = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestSuiteExecution
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 502:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredAndTwoApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get test suite execution artifacts
     *
     * @remarks
     * Returns test suite execution artifacts with given executionID
     */
    async getTestSuiteExecutionArtifacts(
        req: operations.GetTestSuiteExecutionArtifactsRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: GetTestSuiteExecutionArtifactsAcceptEnum
    ): Promise<operations.GetTestSuiteExecutionArtifactsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetTestSuiteExecutionArtifactsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/test-suite-executions/{executionID}/artifacts",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetTestSuiteExecutionArtifactsResponse =
            new operations.GetTestSuiteExecutionArtifactsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.artifact = utils.objectToClass(JSON.parse(decodedRes), shared.Artifact);
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.classes = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.classes = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get test suite execution artifacts
     *
     * @remarks
     * Returns test suite execution artifacts with given executionID
     */
    async getTestSuiteExecutionArtifactsByTestsuite(
        req: operations.GetTestSuiteExecutionArtifactsByTestsuiteRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: GetTestSuiteExecutionArtifactsByTestsuiteAcceptEnum
    ): Promise<operations.GetTestSuiteExecutionArtifactsByTestsuiteResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetTestSuiteExecutionArtifactsByTestsuiteRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/test-suites/{id}/executions/{executionID}/artifacts",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetTestSuiteExecutionArtifactsByTestsuiteResponse =
            new operations.GetTestSuiteExecutionArtifactsByTestsuiteResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.artifact = utils.objectToClass(JSON.parse(decodedRes), shared.Artifact);
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get test suite execution by ID
     *
     * @remarks
     * Returns test suite execution with given executionID
     */
    async getTestSuiteExecutionByID(
        req: operations.GetTestSuiteExecutionByIDRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: GetTestSuiteExecutionByIDAcceptEnum
    ): Promise<operations.GetTestSuiteExecutionByIDResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetTestSuiteExecutionByIDRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/test-suite-executions/{executionID}",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetTestSuiteExecutionByIDResponse =
            new operations.GetTestSuiteExecutionByIDResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testSuiteExecution = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestSuiteExecution
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.classes = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.classes = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get all test suite executions
     *
     * @remarks
     * Returns array of test suite executions
     */
    async listAllTestSuiteExecutions(
        req: operations.ListAllTestSuiteExecutionsRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: ListAllTestSuiteExecutionsAcceptEnum
    ): Promise<operations.ListAllTestSuiteExecutionsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListAllTestSuiteExecutionsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = baseURL.replace(/\/$/, "") + "/test-suite-executions";
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListAllTestSuiteExecutionsResponse =
            new operations.ListAllTestSuiteExecutionsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testSuiteExecutionsResult = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestSuiteExecutionsResult
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.classes = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.classes = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get all test executions
     *
     * @remarks
     * Returns array of test executions
     */
    async listExecutions(
        req: operations.ListExecutionsRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: ListExecutionsAcceptEnum
    ): Promise<operations.ListExecutionsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListExecutionsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = baseURL.replace(/\/$/, "") + "/executions";
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListExecutionsResponse = new operations.ListExecutionsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.executionsResult = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.ExecutionsResult
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get all test executions
     *
     * @remarks
     * Returns array of all available test executions
     */
    async listTestExecutions(
        req: operations.ListTestExecutionsRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: ListTestExecutionsAcceptEnum
    ): Promise<operations.ListTestExecutionsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTestExecutionsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(baseURL, "/tests/{id}/executions", req);
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListTestExecutionsResponse =
            new operations.ListTestExecutionsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.executionsResult = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.ExecutionsResult
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 404:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredAndFourApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get all test suite executions
     *
     * @remarks
     * Returns array of all available test suite executions
     */
    async listTestSuiteExecutions(
        req: operations.ListTestSuiteExecutionsRequest,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: ListTestSuiteExecutionsAcceptEnum
    ): Promise<operations.ListTestSuiteExecutionsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTestSuiteExecutionsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = utils.generateURL(
            baseURL,
            "/test-suites/{id}/executions",
            req
        );
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] = "application/json;q=1, application/problem+json;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl + queryParams,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListTestSuiteExecutionsResponse =
            new operations.ListTestSuiteExecutionsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.testSuiteExecutionsResult = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.TestSuiteExecutionsResult
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.classes = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.classes = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Upload file
     *
     * @remarks
     * Upload file to be used in executions and tests
     */
    async uploads(
        req: shared.UploadsBody,
        config?: AxiosRequestConfig,
        acceptHeaderOverride?: UploadsAcceptEnum
    ): Promise<operations.UploadsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.UploadsBody(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const operationUrl: string = baseURL.replace(/\/$/, "") + "/uploads";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "multipart");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }
        const client: AxiosInstance = this.sdkConfiguration.defaultClient;
        const headers: RawAxiosRequestHeaders = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null) throw new Error("request body is required");
        if (acceptHeaderOverride !== undefined) {
            headers["Accept"] = acceptHeaderOverride.toString();
        } else {
            headers["Accept"] =
                "application/json;q=1, application/problem+json;q=0.7, text/yaml;q=0";
        }

        headers["user-agent"] = this.sdkConfiguration.userAgent;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: operationUrl,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UploadsResponse = new operations.UploadsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.twoHundredApplicationJsonRes = decodedRes;
                } else if (utils.matchContentType(contentType, `text/yaml`)) {
                    res.twoHundredTextYamlRes = decodedRes;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 400:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fourHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fourHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
            case httpRes?.status == 500:
                if (utils.matchContentType(contentType, `application/problem+json`)) {
                    res.fiveHundredApplicationProblemPlusJsonClasses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.fiveHundredApplicationProblemPlusJsonClasses = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.Problem,
                        resFieldDepth
                    );
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }
}
